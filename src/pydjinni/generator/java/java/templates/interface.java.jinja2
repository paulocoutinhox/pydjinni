{% extends "base.jinja2" %}
{% from "macros.jinja2" import data_type, return_type, parameters %}

{% block header %}
{% if type_def.cpp.proxy %}
import java.util.concurrent.atomic.AtomicBoolean;
{% endif %}
{% endblock %}

{% block content %}
{% if type_def.comment %}
{{ type_def.java.comment }}
{% endif %}
{{ type_def.java.class_modifier }}abstract class {{ type_def.java.name }} {
    {% if type_def.main and config.native_lib %}
    static {
        new {{ config.package|join('.') }}.native_lib.{{ config.native_lib }}Loader();
    }
    {% endif %}
    {%  if type_def.properties|length > 0 %}
    protected {{ type_def.java.name }}(
        {%- for property in type_def.properties -%}
            {{ property.type_ref.type_def.java.typename }} {{ property.java.name ~ (', ' if not loop.last) }}
        {%- endfor -%}
        ) {
        {% for property in type_def.properties %}
        _{{ property.java.name }} = new pydjinni.Property<>({{ property.java.name }});
        {% endfor %}
    }
    {% endif %}
    {% for method in type_def.methods %}
    {% if method.comment %}
    {{ method.java.comment | indent(4) }}
    {% endif %}
    public {{ "static" if method.static else "abstract" }} {{ return_type(method.return_type_ref) }} {{ method.java.name }}({{ parameters(method) }})
    {%- if method.static -%}
    {
        {{ "return " if method.return_type_ref }}CppProxy.{{ method.java.name }}(
        {%- for parameter in method.parameters -%}
        {{ parameter.java.name ~ (", " if not loop.last) }}
        {%- endfor -%}
        );
    };
    {% else -%}
    ;
    {% endif %}
    {% endfor %}
    {% for property in type_def.properties %}
    public pydjinni.{{ 'ReadOnly' if property.readonly }}Property<{{ property.type_ref.type_def.java.boxed }}> {{ property.java.getter }}() {
        return _{{ property.java.name }};
    }
    {% endfor %}
    {% for property in type_def.properties %}
    protected final pydjinni.{{ 'ReadOnly' if property.readonly }}Property<{{ property.type_ref.type_def.java.boxed }}> _{{ property.java.name }};
    {% endfor %}
    {% if type_def.cpp.proxy %}
    private static final class CppProxy extends {{ type_def.java.name }} {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef
            {%- for property in type_def.properties -%}
                , {{ property.type_ref.type_def.java.typename }} {{ property.java.name }}
            {%- endfor -%}
        )
        {
            super(
            {%- for property in type_def.properties -%}
                {{ property.java.name ~ (", " if not loop.last) }}
            {%- endfor -%}
            );
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            {% if type_def.properties|length > 0 %}
            {% endif %}
            {% for property in type_def.properties if not property.readonly %}
            _{{ property.java.name }}.onChange(value -> {
                native_property_{{ property.java.name }}_changed(this.nativeRef, value);
            });
            {% endfor %}
        }
        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        @SuppressWarnings("deprecation")
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }
        {% for method in type_def.methods %}
        {% if method.static %}
        public static native {{ return_type(method.return_type_ref) }} {{ method.java.name }}({{ parameters(method) }});
        {% else %}
        @Override
        public {{ return_type(method.return_type_ref) }} {{ method.java.name }}({{ parameters(method) }}) {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            {{ "return" if method.return_type_ref }} native_{{ method.java.name }}(this.nativeRef {{ (", " if method.parameters) ~ parameters(method, with_types=False) }});
        }
        private native {{ return_type(method.return_type_ref) }} native_{{ method.java.name }}(long _nativeRef{{ (", " if method.parameters) ~ parameters(method) }});
        {% endif %}
        {% endfor %}
        {% for property in type_def.properties if not property.readonly %}
        private native void native_property_{{ property.java.name }}_changed(long _nativeRef, {{ property.type_ref.type_def.java.typename }} {{ property.java.name }});
        {% endfor %}
    }
    {% endif %}
}
{% endblock %}
